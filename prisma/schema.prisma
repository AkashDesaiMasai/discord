generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique
  username String @unique
  name     String
  email    String @unique
  imageUrl String

  servers  Server[]
  Channels Channel[]
  members  Member[]

  directMessagesSent     DirectMessage[] @relation("sender")
  directMessagesReceived DirectMessage[] @relation("receiver")

  conversationsInitiated Conversation[] @relation("memberOne")
  conversationsReceived  Conversation[] @relation("memberTwo")

  friendRequestsSent     Friend[] @relation("requestSent")
  friendRequestsReceived Friend[] @relation("friendRequests")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  memberOneId String  @map("conversationsInitiated") @db.ObjectId
  memberOne   Profile @relation("memberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String  @map("conversationsReceived") @db.ObjectId
  memberTwo   Profile @relation("memberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  senderId String  @map("directMessagesSent") @db.ObjectId
  sender   Profile @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String  @map("directMessagesReceived") @db.ObjectId
  receiver   Profile @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  conversationId String       @map("directMessages") @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  fileUrl   String   @default("")
  content   String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
}

model Friend {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  fromProfileID String  @map("fromProfileID") @db.ObjectId
  RequestSent   Profile @relation("requestSent", fields: [fromProfileID], references: [id], onDelete: Cascade)

  toProfileID    String  @map("toProfileID") @db.ObjectId
  friendRequests Profile @relation("friendRequests", fields: [toProfileID], references: [id], onDelete: Cascade)

  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Server {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  inviteCode String
  profileId  String    @map("profileID") @db.ObjectId
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    Member[]
  channels   Channel[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([profileId], name: "Server_ProfileId_Index")
  @@index([inviteCode], name: "Server_InviteCode_Index")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @map("profileID") @db.ObjectId

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @map("serverId") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId], name: "Member_ProfileId_Index")
  @@index([serverId], name: "Member_ServerId_Index")
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  serverId String @map("serverId") @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId], name: "Channel_ServerId_Index")
}
